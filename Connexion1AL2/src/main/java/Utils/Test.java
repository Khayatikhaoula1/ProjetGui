package Utils;

import Entites.*;
import Services.UserService;
import Services.NoteService;
import Services.InscriptionService;
import Services.AbsenceService;

import java.sql.Date;
import java.util.List;

public class Test {
    public static void main(String[] args) {
        // Cr√©er une instance de UserService pour tester les utilisateurs
        UserService userService = new UserService();

        try {
            // üîπ R√©cup√©rer le r√¥le "Admin" existant
            Role roleAdmin = userService.getRoleByName("Administrateur");

            if (roleAdmin != null) {
                // üîπ Cr√©er et ins√©rer un utilisateur avec ce r√¥le
                User newUser = new User(22, "Khawla", "password123", roleAdmin, "Etudiant@test.com");
                boolean success = userService.createUser(newUser.getUsername(), newUser.getPassword(), newUser.getRole(), newUser.getEmail());

                if (success) {
                    System.out.println("‚úÖ Utilisateur ajout√© avec succ√®s !");
                } else {
                    System.out.println("‚ùå Erreur lors de l'ajout de l'utilisateur.");
                }
            } else {
                System.out.println("‚ùå Le r√¥le 'Admin' n'existe pas dans la base !");
            }

            // Tester les notes avec NoteService
            NoteService noteService = new NoteService();
            Note newNote = new Note(   7, 22, 3, 20, new Date(System.currentTimeMillis()));
            noteService.addNote(newNote);  // Appel √† la m√©thode addNote() de NoteService
            System.out.println("Note ajout√©e avec succ√®s !");

            // R√©cup√©rer les notes pour un √©tudiant
            List<Note> fetchedNotes = noteService.getNotesByStudent(22); // ID √©tudiant 5
            if (!fetchedNotes.isEmpty()) {
                for (Note note : fetchedNotes) {
                    System.out.println("Note de l'√©tudiant : " + note.getNote());
                }
            } else {
                System.out.println("Aucune note trouv√©e pour cet √©tudiant.");
            }

            // Tester les inscriptions avec InscriptionService
            InscriptionService inscriptionService = new InscriptionService();
            Inscription newInscription = new Inscription(0, 22, 1, new Date(System.currentTimeMillis())); // Ajout de la date d'inscription
            inscriptionService.addInscription(newInscription);  // Appel √† la m√©thode addInscription() de InscriptionService
            System.out.println("Inscription ajout√©e avec succ√®s !");

            // R√©cup√©rer les inscriptions pour un √©tudiant
            List<Inscription> fetchedInscriptions = inscriptionService.getInscriptionsByStudent(5); // ID √©tudiant 5
            if (!fetchedInscriptions.isEmpty()) {
                for (Inscription inscription : fetchedInscriptions) {
                    System.out.println("Inscriptions de l'√©tudiant : " + inscription.getCoursId());
                }
            } else {
                System.out.println("Aucune inscription trouv√©e pour cet √©tudiant.");
            }

            // Tester les absences avec AbsenceService
            AbsenceService absenceService = new AbsenceService();
            Absence newAbsence = new Absence(0, 22, new Date(System.currentTimeMillis()), "Maladie"); // (ID √©tudiant, date d'absence, motif)
            absenceService.addAbsence(newAbsence);  // Appel √† la m√©thode addAbsence() de AbsenceService
            System.out.println("Absence ajout√©e avec succ√®s !");

            // R√©cup√©rer les absences pour un √©tudiant
            List<Absence> fetchedAbsences = absenceService.getAbsencesByStudent(22); // ID √©tudiant 5
            if (!fetchedAbsences.isEmpty()) {
                for (Absence absence : fetchedAbsences) {
                    System.out.println("Absence de l'√©tudiant : " + absence.getDate()); // Utilisation de getDate() au lieu de getDateAbsence()
                }
            } else {
                System.out.println("Aucune absence trouv√©e pour cet √©tudiant.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Une erreur est survenue. V√©rifiez les logs.");
        }
    }
}
